version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl "https://kvdb.io/Jceh2agBH5U5R7u6oKMpjb/migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if(( $SUCCESS==1 )); 
              then
              cd ~/project/backend
              npm install
              npm run migrate:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: | 
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontendnode_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: | 
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backendnode_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command : |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: Front-end scan
          command: | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Front-end scan
          command: | 
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-shine \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-shine \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[0].OutputValue" \
              --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 

  configure-infrastructure:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:e4:80:ac:ef:91:ff:fd:99:9b:91:f5:e4:38:f3:88"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 
  run-migrations:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install curl
          command: |
            sudo apt-get install -y curl
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration-dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully" ./backend/migration-dump.txt
            then
              curl https://kvdb.io/Jceh2agBH5U5R7u6oKMpjb/migration_${CIRCLE_WORKFLOW_ID:0:7} \
              -d "1"
            else
              curl https://kvdb.io/Jceh2agBH5U5R7u6oKMpjb/migration_${CIRCLE_WORKFLOW_ID:0:7} \
              -d "0"
            fi
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  deploy-frontend:
    docker: 
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install tar and gzip
          command: |
            sudo apt-get install -y tar gzip
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[0].OutputValue" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  deploy-backend:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:e4:80:ac:ef:91:ff:fd:99:9b:91:f5:e4:38:f3:88"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip ansible npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  smoke-test:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install -y curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[0].OutputValue" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-ap-southeast-1.amazonaws.com/#/employees"            
              echo ${URL} 
              curl -s ${URL} | grep "Welcome"
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[0].OutputValue" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            curl "https://webhook.site/813d7f25-c10d-41ed-8a96-d13dd450b9f4"
            curl ${API_URL}/api/status | grep "ok" 
      # - revert-migrations:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  cloudfront-update:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  cleanup:
    docker:
      - image: doctrine/nodejs-aws-cli:latest
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-backend, test-frontend, scan-backend, scan-frontend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
